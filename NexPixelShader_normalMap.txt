Texture2D Nor : register(t1);  
Texture2D tex : register(t0);
SamplerState samplerLinear : register(s0);

cbuffer LightingBuffer
{
    float4 LightDir;         
    float4 ViewPos;          
    float4 LightColor;       
};

struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float3 Normal : NORMAL;
    float3 Tangent : TANGENT;
    float2 TexCoords : TEXCOORD;
};

float4 PS(PS_INPUT input) : SV_Target0
{
    float Amk = 0.2f;                
    float Spk= 0.5f;                    
    float Shin = 30.0f;                    
   
    float4 colour = tex.Sample(samplerLinear, input.TexCoords);

        if (colour.a <= 0.3)
    {
        discard; 
    }  

    float3 mapNormal = Nor.Sample(samplerLinear, input.TexCoords).xyz* 2.0 - 1.0;
    
   mapNormal.g = -mapNormal.g;

    float3 normal = normalize(input.Normal);
    float3 tangent = normalize(input.Tangent);
    float3 binormal = normalize(cross(input.Normal,tangent));
    float3x3 TBN = float3x3(tangent, binormal, normal);
    float3 worldNormal = normalize(mul(mapNormal, TBN));
    
    float3 lightDir = normalize(LightDir.xyz);
    float3 viewDir = normalize(ViewPos - input.Pos.xyz); 
    
    float diff = max(dot(worldNormal, lightDir), 0.0);
    float3 diffuse = diff * LightColor;

    float3 reflectDir = reflect(-lightDir, worldNormal);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), Shin);
    float3 specular = Spk * spec * LightColor;

    float3 ambient = Amk * LightColor;
    

    float3 lighting = ambient + diffuse + specular;   
    float3 finalColor = lighting * colour.rgb;
  
    return float4(finalColor.xyz,1.0);
}